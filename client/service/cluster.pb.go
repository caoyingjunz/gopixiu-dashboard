// 指定proto指定版本

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: pbfile/cluster.proto

// 指定文件生出出来的package

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义request model 请求
type ProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName             string   `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	KubernetesEdi           float32  `protobuf:"fixed32,2,opt,name=KubernetesEdi,proto3" json:"KubernetesEdi,omitempty"`
	Region                  string   `protobuf:"bytes,3,opt,name=Region,proto3" json:"Region,omitempty"`
	ContaionsRunTime        string   `protobuf:"bytes,4,opt,name=ContaionsRunTime,proto3" json:"ContaionsRunTime,omitempty"`
	ContaionsNetworkPlugins string   `protobuf:"bytes,5,opt,name=ContaionsNetworkPlugins,proto3" json:"ContaionsNetworkPlugins,omitempty"`
	ContaionsNetwork        string   `protobuf:"bytes,6,opt,name=ContaionsNetwork,proto3" json:"ContaionsNetwork,omitempty"`
	ServiceCidr             string   `protobuf:"bytes,7,opt,name=ServiceCidr,proto3" json:"ServiceCidr,omitempty"`
	Clusterdescribe         string   `protobuf:"bytes,8,opt,name=Clusterdescribe,proto3" json:"Clusterdescribe,omitempty"`
	ClusterType             string   `protobuf:"bytes,9,opt,name=ClusterType,proto3" json:"ClusterType,omitempty"`
	VipKubernetes           string   `protobuf:"bytes,10,opt,name=VipKubernetes,proto3" json:"VipKubernetes,omitempty"`
	DeplayMaster            []string `protobuf:"bytes,11,rep,name=DeplayMaster,proto3" json:"DeplayMaster,omitempty"`
	DeplayNode              []string `protobuf:"bytes,12,rep,name=DeplayNode,proto3" json:"DeplayNode,omitempty"`
	NodeLogin               string   `protobuf:"bytes,13,opt,name=NodeLogin,proto3" json:"NodeLogin,omitempty"`
	UserName                string   `protobuf:"bytes,14,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Password                string   `protobuf:"bytes,15,opt,name=Password,proto3" json:"Password,omitempty"`
	Ip                      string   `protobuf:"bytes,16,opt,name=Ip,proto3" json:"Ip,omitempty"`
}

func (x *ProductRequest) Reset() {
	*x = ProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbfile_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRequest) ProtoMessage() {}

func (x *ProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbfile_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRequest.ProtoReflect.Descriptor instead.
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return file_pbfile_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *ProductRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ProductRequest) GetKubernetesEdi() float32 {
	if x != nil {
		return x.KubernetesEdi
	}
	return 0
}

func (x *ProductRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ProductRequest) GetContaionsRunTime() string {
	if x != nil {
		return x.ContaionsRunTime
	}
	return ""
}

func (x *ProductRequest) GetContaionsNetworkPlugins() string {
	if x != nil {
		return x.ContaionsNetworkPlugins
	}
	return ""
}

func (x *ProductRequest) GetContaionsNetwork() string {
	if x != nil {
		return x.ContaionsNetwork
	}
	return ""
}

func (x *ProductRequest) GetServiceCidr() string {
	if x != nil {
		return x.ServiceCidr
	}
	return ""
}

func (x *ProductRequest) GetClusterdescribe() string {
	if x != nil {
		return x.Clusterdescribe
	}
	return ""
}

func (x *ProductRequest) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *ProductRequest) GetVipKubernetes() string {
	if x != nil {
		return x.VipKubernetes
	}
	return ""
}

func (x *ProductRequest) GetDeplayMaster() []string {
	if x != nil {
		return x.DeplayMaster
	}
	return nil
}

func (x *ProductRequest) GetDeplayNode() []string {
	if x != nil {
		return x.DeplayNode
	}
	return nil
}

func (x *ProductRequest) GetNodeLogin() string {
	if x != nil {
		return x.NodeLogin
	}
	return ""
}

func (x *ProductRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ProductRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ProductRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// 定义response model 返回
type ProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clustername string `protobuf:"bytes,1,opt,name=clustername,proto3" json:"clustername,omitempty"` // 1代表顺序
	Username    string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ProductResponse) Reset() {
	*x = ProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbfile_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductResponse) ProtoMessage() {}

func (x *ProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbfile_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductResponse.ProtoReflect.Descriptor instead.
func (*ProductResponse) Descriptor() ([]byte, []int) {
	return file_pbfile_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *ProductResponse) GetClustername() string {
	if x != nil {
		return x.Clustername
	}
	return ""
}

func (x *ProductResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ProductResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_pbfile_cluster_proto protoreflect.FileDescriptor

var file_pbfile_cluster_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x62, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0xc0, 0x04, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x45, 0x64, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x45, 0x64, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x69, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x69, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x56, 0x69, 0x70, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x69, 0x70, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x70, 0x22, 0x6b, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32,
	0x53, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbfile_cluster_proto_rawDescOnce sync.Once
	file_pbfile_cluster_proto_rawDescData = file_pbfile_cluster_proto_rawDesc
)

func file_pbfile_cluster_proto_rawDescGZIP() []byte {
	file_pbfile_cluster_proto_rawDescOnce.Do(func() {
		file_pbfile_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbfile_cluster_proto_rawDescData)
	})
	return file_pbfile_cluster_proto_rawDescData
}

var file_pbfile_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pbfile_cluster_proto_goTypes = []interface{}{
	(*ProductRequest)(nil),  // 0: service.ProductRequest
	(*ProductResponse)(nil), // 1: service.ProductResponse
}
var file_pbfile_cluster_proto_depIdxs = []int32{
	0, // 0: service.ProdService.GetProductStock:input_type -> service.ProductRequest
	1, // 1: service.ProdService.GetProductStock:output_type -> service.ProductResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pbfile_cluster_proto_init() }
func file_pbfile_cluster_proto_init() {
	if File_pbfile_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbfile_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbfile_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbfile_cluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbfile_cluster_proto_goTypes,
		DependencyIndexes: file_pbfile_cluster_proto_depIdxs,
		MessageInfos:      file_pbfile_cluster_proto_msgTypes,
	}.Build()
	File_pbfile_cluster_proto = out.File
	file_pbfile_cluster_proto_rawDesc = nil
	file_pbfile_cluster_proto_goTypes = nil
	file_pbfile_cluster_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProdServiceClient is the client API for ProdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProdServiceClient interface {
	// 定义方法
	GetProductStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
}

type prodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProdServiceClient(cc grpc.ClientConnInterface) ProdServiceClient {
	return &prodServiceClient{cc}
}

func (c *prodServiceClient) GetProductStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/service.ProdService/GetProductStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdServiceServer is the server API for ProdService service.
type ProdServiceServer interface {
	// 定义方法
	GetProductStock(context.Context, *ProductRequest) (*ProductResponse, error)
}

// UnimplementedProdServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProdServiceServer struct {
}

func (*UnimplementedProdServiceServer) GetProductStock(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductStock not implemented")
}

func RegisterProdServiceServer(s *grpc.Server, srv ProdServiceServer) {
	s.RegisterService(&_ProdService_serviceDesc, srv)
}

func _ProdService_GetProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).GetProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ProdService/GetProductStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).GetProductStock(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ProdService",
	HandlerType: (*ProdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductStock",
			Handler:    _ProdService_GetProductStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbfile/cluster.proto",
}
